/*
 * Copyright Â© 2011-2016 HERE Global B.V. and its affiliate(s).
 * All rights reserved.
 * The use of this software is conditional upon having a separate agreement
 * with a HERE company for the use or utilization of this software. In the
 * absence of such agreement, the use of the software is not allowed.
 */

#import <Foundation/Foundation.h>

#import "NMAPositionDataSource.h"

/**
 * \addtogroup NMA_Common  NMA Common Group
 * @{
 */

/**
 * Represents the methods than can be used to generate logged position updates.
 */
typedef NS_ENUM(NSUInteger, NMALoggedPositionUpdateStyle) {
    /** \brief One update per log entry, spaced according the entry timestamps */
    NMALoggedPositionUpdateStyleActual,
    /** \brief Updates at a fixed interval, with values interpolated between the two nearest log entries */
    NMALoggedPositionUpdateStyleInterpolated,
    /** \brief Updates at a fixed interval, with values from successive log entries (timestamps ignored) */
    NMALoggedPositionUpdateStyleFixed
};


/**
 * \class NMALoggedPositionSource NMALoggedPositionSource.h "NMALoggedPositionSource.h"
 *
 * \brief A position data source which generates updates from a GPS data log file.
 *
 * The input source of the position updates is specified using the logFile property.
 * The update frequency can be controlled using the updateStyle and updateInterval
 * properties.
 *
 * \note By default this class attempts to generate position updates in the background. See the
 * runsInBackground property.
 */
@interface NMALoggedPositionSource : NSObject<NMAPositionDataSource>

/**
 * The URL of the log file from which position updates are being generated.
 *
 * \note Currently, only the GPX file format is supported.
 */
@property (nonatomic) NSURL *logFile;

/**
 * The array of NMAGeoPositions loaded from the current logFile, or nil if no file is set.
 *
 * \note These objects are not exactly the same as objects returned by currentPosition as
 * the currentPosition may have a different timestamp depending upon the values of
 * usesOriginalTimestamps and updateStyle
 */
@property (nonatomic, readonly) NSArray *positions;

/**
 * The index of the current position within positions
 */
@property (nonatomic, readonly) NSUInteger currentPositionIndex;

/**
 * The update style of the data source; the style controls update frequency.
 *
 * \note The default value is NMALoggedPositionUpdateStyleActual.
 *
 * \sa NMALoggedPositionUpdateStyle
 */
@property (nonatomic) NMALoggedPositionUpdateStyle updateStyle;

/**
 * The time interval between successive position updates, in seconds.
 *
 * If the position update style is interval-based, this property controls the time
 * between updates. If the update style is NMALoggedPositionUpdateStyleActual, this
 * property has no effect.
 *
 * The minimum value of the property is 0.1 seconds, the
 * default value is 1.0 seconds.
 */
@property (nonatomic) NSTimeInterval updateInterval;

/**
 * \brief Controls whether or not the log file time stamps are used in position updates.
 *
 * If this property is set to YES, position values will be created with the time stamp
 * of their corresponding data point in the log file. If this property is NO, the time
 * stamps of the position updates will be calculated relative to the time when position
 * updating was started. The time offset of each data point will be equal to the time
 * difference between that point's timestamp and the timestamp of the first data point
 * in the log file.
 *
 * \note The default value is NO.
 */
@property (nonatomic) BOOL usesOriginalTimestamps;

/**
 * The default horizontal accuracy value in meters, used when a log data point does not
 * specify an accuracy.
 *
 * \note The default value is 5.0 meters.
 */
@property (nonatomic) float horizontalAccuracy;

/**
 * The default vertical accuracy value in meters, used when a log data point does not
 * specify an accuracy.
 *
 * \note The default value is 5.0 meters.
 */
@property (nonatomic) float verticalAccuracy;

/**
 * Indicates whether or not the simulated positions are moving through the log.
 *
 * If stationary is YES, the currentPosition will remain fixed at the last calculated
 * position, or the beginning of the log file if no progress has been made.
 *
 * \note The default value is NO.
 */
@property (nonatomic) BOOL stationary;

/**
 * Indicates whether the position source returns valid positions.
 *
 * Setting positionLost to YES can be used to simulate position loss. Position updates
 * will still be generated by the position source, but the currentPosition property
 * will always return nil.
 *
 * \note Progress through the log will continue regardless of the value of this property.
 *
 * \note The default value is NO.
 */
@property (nonatomic) BOOL positionLost;

/**
 * Indicates whether the position source has reached the end of its log file.
 *
 * \note Returns NO if the source has not yet been started.
 */
@property (nonatomic, readonly) BOOL finished;

/**
 * Indicates whether the position source attempts to keep the application running in the
 * background in order to provide position updates.
 *
 * Defaults to YES.
 *
 * \note UIApplication background tasks are used to keep the app running in the background to
 * generate position updates. The amount of time it can run in the background is therefore
 * decided by Apple and could only be a couple of minutes. To guarantee background position
 * updates beyond this you will need use other means to keep your app running in the
 * background.
*/
@property (nonatomic) BOOL runsInBackground;

/**
 * Creats a logged position source with the specified log file as input.
 */
- (id)initWithLogFile:(NSURL *)logFile;

/**
 * Erases all progress through the log.
 *
 * \note This method will not affect any properties, including the current log file.
 */
- (void)reset;

@end
/** @} */
