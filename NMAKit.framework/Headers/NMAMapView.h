/*
 * Copyright Â© 2011-2016 HERE Global B.V. and its affiliate(s).
 * All rights reserved.
 * The use of this software is conditional upon having a separate agreement
 * with a HERE company for the use or utilization of this software. In the
 * absence of such agreement, the use of the software is not allowed.
 */

#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>

#import "NMATypes.h"
#import "NMAMapGesture.h"
#import "NMAMapTileLayer.h"

@class NMAGeoBoundingBox;
@class NMAGeoCoordinates;
@class NMAMapObject;
@class NMAMapOverlay;
@class NMAMapGesture;
@class NMAPositionIndicator;
@class NMAMapTransitLayer;
@class NMARoute;
@class NMAVenue3dMapLayer;
@class NMAClusterLayer;
@class NMACustomizableScheme;
@protocol NMAMapGestureDelegate;

/**
 * \addtogroup NMA_Map NMA Mapping Group
 *
 * The Mapping group provides classes, protocols, and enumerations that
 * can be used to enable an interactive map and
 * related functionality, such as creating and adding map objects.
 * Some key classes and protocols in this group are:
 * {@link NMAMapView}, {@link NMAMapGestureDelegate},
 * {@link NMAMapObject}, and {@link NMAMapScheme}
 *
 * @{
 */


#pragma mark - Constants
/**
 * This value may be passed into the map move method
 * \link NMAMapView::setGeoCenter:zoomLevel:orientation:tilt:withAnimation:\endlink
 * in place of a zoom, orientation, or tilt value in order to preserve the current value of that property.
 *
 * \sa NMAMapView::setGeoCenter:zoomLevel:orientation:tilt:withAnimation:
 */
FOUNDATION_EXPORT const float NMAMapViewPreserveValue;

/**
 * The maximum amount that an NMAMapView may be tilted.
 *
 * \note Additional limitations may be placed on the tilt of an NMAMapView using its
 * maximumTiltProfile property.
 */
FOUNDATION_EXPORT const float NMAMapViewMaximumTilt;


#pragma mark - Enums

typedef NS_ENUM(NSInteger, NMAProjectionType) {
    /** \brief A 2D Mercator projection. */
    NMAProjectionTypeMercator,
    /** \brief A 3D globe projection. */
    NMAProjectionTypeGlobe
};

/**
 * Defines types of animations that can illustrate on-screen map movements.
 */
typedef NS_ENUM(NSUInteger, NMAMapAnimation) {
    /**
     * \brief Animation zooms in and then out again in a bow-like manner as the map
     * resets to a new position.
     */
    NMAMapAnimationBow,
    /** \brief Animation moves in a linear manner as the map resets to a new position. */
    NMAMapAnimationLinear,
    /** \brief No animation is performed as the map resets to a new position. */
    NMAMapAnimationNone,
    /** brief Animation moves a way that simulates the flight path of a rocket. */
    NMAMapAnimationRocket
};

/**
 * Types of event generated by NMAMapView.
 *
 * \sa NMAMapView::respondToEvents:withBlock:
 */
typedef NS_ENUM(NSInteger, NMAMapEvent) {
    /** \brief The map geoCenter property has changed. */
    NMAMapEventGeoCenterChanged         = 1 << 0,
    /** \brief The map zoomLevel property has changed. */
    NMAMapEventZoomLevelChanged         = 1 << 1,
    /** \brief The map orientation property has changed. */
    NMAMapEventOrientationChanged       = 1 << 2,
    /** \brief The map tilt property has changed. */
    NMAMapEventTiltChanged              = 1 << 3,

    /**
     * The map has begun being transformed from any continuous source, such as gestures
     * or animation. Transformation means that one or more of the geoCenter, zoomLevel,
     * orientation, and tilt properties are being changed.
     *
     * \note This event will not be triggered by explicit assignments to the properties
     * listed above.
     */
    NMAMapEventTransformationBegan      = 1 << 4,
    /** \brief The map has finished being transformed from all sources. */
    NMAMapEventTransformationEnded      = 1 << 5,
    /** \brief A gesture has begun on the map. */
    NMAMapEventGestureBegan             = 1 << 6,
    /** \brief All gestures have ended on the map. */
    NMAMapEventGestureEnded             = 1 << 7,
    /** \brief An animation has begun on the map. */
    NMAMapEventAnimationBegan           = 1 << 8,
    /** \brief An animation has finished on the map. */
    NMAMapEventAnimationEnded           = 1 << 9,

    /** \brief Indicates all map event types. */
    NMAMapEventAll                      = 0xFFFF
};

/**
 * Defines types of ways to display transit operations on a map.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
typedef NS_ENUM(NSInteger, NMAMapTransitDisplayMode) {
    /** \brief Hide all transit/train stops, accesses and lines. */
    NMAMapTransitDisplayModeNothing,
    /** \brief (Default) Show transit/train stops and accesses, but hide transit lines. */
    NMAMapTransitDisplayModeStopAndAccess,
    /** \brief Show all transit/train stops, accesses and lines. */
    NMAMapTransitDisplayModeEverything
};

/**
 * Traffic layer type enum mask
 *
 * @product nlp-hybrid-plus nlp-plus
 */
typedef NS_ENUM(NSInteger, NMATrafficLayer) {
    NMATrafficLayerFlow         = 0x01,
    NMATrafficLayerIncidents    = 0x02,
    NMATrafficLayerOnRoute      = 0x04,
    NMATrafficLayerAll          = 0xFF
};

/**
 * Map layer category type enum
 *
 * @product nlp-hybrid-plus nlp-plus
 */
typedef NS_ENUM(NSInteger, NMAMapLayerCategory) {
    /** \brief Land */
    NMAMapLayerCategoryLand,
    /** \brief Water */
    NMAMapLayerCategoryWater,
    /** \brief Labels for oceans */
    NMAMapLayerCategoryLabelOcean,
    /** \brief Labels for seas */
    NMAMapLayerCategoryLabelSea,
    /** \brief Labels for lakes, rivers, canals, etc. */
    NMAMapLayerCategoryLabelWaterOther,
    /** \brief Beach */
    NMAMapLayerCategoryBeach,
    /** \brief Woodland */
    NMAMapLayerCategoryWoodland,
    /** \brief Desert */
    NMAMapLayerCategoryDesert,
    /** \brief Glacier */
    NMAMapLayerCategoryGlacier,
    /** \brief Labels for beaches */
    NMAMapLayerCategoryLabelBeach,
    /** \brief Labels for woodland */
    NMAMapLayerCategoryLabelWoodland,
    /** \brief Labels for deserts */
    NMAMapLayerCategoryLabelDesert,
    /** \brief Labels for glaciers */
    NMAMapLayerCategoryLabelGlacier,
    /** \brief Airport area */
    NMAMapLayerCategoryAirportArea,
    /** \brief Amusement park */
    NMAMapLayerCategoryAmusementPark,
    /** \brief Animal park */
    NMAMapLayerCategoryAnimalPark,
    /** \brief Built-up area */
    NMAMapLayerCategoryBuiltup,
    /** \brief Cemetery */
    NMAMapLayerCategoryCemetery,
    /** \brief Golf course */
    NMAMapLayerCategoryGolfCourse,
    /** \brief Harbor area */
    NMAMapLayerCategoryHarborArea,
    /** \brief Hospital campus */
    NMAMapLayerCategoryHospitalCampus,
    /** \brief Industrial complex */
    NMAMapLayerCategoryIndustrialComplex,
    /** \brief Military base */
    NMAMapLayerCategoryMilitaryBase,
    /** \brief National park */
    NMAMapLayerCategoryNationalPark,
    /** \brief Native reserves */
    NMAMapLayerCategoryNativeReservation,
    /** \brief Military base outline */
    NMAMapLayerCategoryOutlineMilitaryBase,
    /** \brief National park outline */
    NMAMapLayerCategoryOutlineNationalPark,
    /** \brief Native reserves outline */
    NMAMapLayerCategoryOutlineNativeReservation,
    /** \brief City park */
    NMAMapLayerCategoryCityPark,
    /** \brief Pedestrian area */
    NMAMapLayerCategoryPedestrianArea,
    /** \brief Rail yard */
    NMAMapLayerCategoryRailyard,
    /** \brief Shopping complex */
    NMAMapLayerCategoryShoppingComplex,
    /** \brief Sports complex */
    NMAMapLayerCategorySportsComplex,
    /** \brief University campus */
    NMAMapLayerCategoryUniversityCampus,
    /** \brief Airport area labels */
    NMAMapLayerCategoryLabelAirportArea,
    /** \brief Amusement park labels */
    NMAMapLayerCategoryLabelAmusementPark,
    /** \brief Animal park labels */
    NMAMapLayerCategoryLabelAnimalPark,
    /** \brief Cemetery labels */
    NMAMapLayerCategoryLabelCemetery,
    /** \brief Golf course labels */
    NMAMapLayerCategoryLabelGolfCourse,
    /** \brief Harbor area labels */
    NMAMapLayerCategoryLabelHarborArea,
    /** \brief Hospital campus labels */
    NMAMapLayerCategoryLabelHospitalCampus,
    /** \brief Industrial complex labels */
    NMAMapLayerCategoryLabelIndustrialComplex,
    /** \brief Military base labels */
    NMAMapLayerCategoryLabelMilitaryBase,
    /** \brief National park labels */
    NMAMapLayerCategoryLabelNationalPark,
    /** \brief Native reserve labels */
    NMAMapLayerCategoryLabelNativeReservation,
    /** \brief City park labels */
    NMAMapLayerCategoryLabelCityPark,
    /** \brief Pedestrian area labels */
    NMAMapLayerCategoryLabelPedestrianArea,
    /** \brief Rail yard labels */
    NMAMapLayerCategoryLabelRailyard,
    /** \brief Shopping complex labels */
    NMAMapLayerCategoryLabelShoppingComplex,
    /** \brief Sports complex labels */
    NMAMapLayerCategoryLabelSportsComplex,
    /** \brief University campus labels */
    NMAMapLayerCategoryLabelUniversityCampus,
    /** \brief Street of highest importance, for example, national highways */
    NMAMapLayerCategoryStreetCategory0,
    /** \brief Street of 2nd highest importance */
    NMAMapLayerCategoryStreetCategory1,
    /** \brief Street of medium importance */
    NMAMapLayerCategoryStreetCategory2,
    /** \brief Street of 2nd lowest importance */
    NMAMapLayerCategoryStreetCategory3,
    /** \brief Street of lowest importance, for example, small local roads. */
    NMAMapLayerCategoryStreetCategory4,
    /** \brief Pedestrian-friendly streets */
    NMAMapLayerCategoryStreetCategoryPedestrian,
    /** \brief Pedestrian-only streets */
    NMAMapLayerCategoryStreetCategoryWalkway,
    /** \brief Labels for streets included in {@link #NMAMapLayerCategoryStreetCategory0}. */
    NMAMapLayerCategoryLabelStreetCategory0,
    /** \brief Labels for streets included in {@link #NMAMapLayerCategoryStreetCategory1}. */
    NMAMapLayerCategoryLabelStreetCategory1,
    /** \brief Labels for streets included in {@link #NMAMapLayerCategoryStreetCategory2}. */
    NMAMapLayerCategoryLabelStreetCategory2,
    /** \brief Labels for streets included in {@link #NMAMapLayerCategoryStreetCategory3}. */
    NMAMapLayerCategoryLabelStreetCategory3,
    /** \brief Labels for streets included in {@link #NMAMapLayerCategoryStreetCategory4}. */
    NMAMapLayerCategoryLabelStreetCategory4,
    /** \brief Labels for Pedestrian-friendly streets */
    NMAMapLayerCategoryLabelStreetCategoryPedestrian,
    /** \brief Labels for Pedestrian-only streets */
    NMAMapLayerCategoryLabelStreetCategoryWalkway,
    /** \brief Roadside icon */
    NMAMapLayerCategoryRoadsignIcon,
    /** \brief Exit sign */
    NMAMapLayerCategoryExitSign,
    /** \brief Country border */
    NMAMapLayerCategoryBorderCountry,
    /** \brief State border */
    NMAMapLayerCategoryBorderState,
    /** \brief Region border */
    NMAMapLayerCategoryBorderRegional,
    /** \brief Builtup border */
    NMAMapLayerCategoryBorderBuiltup,
    /** \brief Line Of Control border i.e. is an internationally recognized boundary in a disputed area. */
    NMAMapLayerCategoryBorderLineOfControl,
    /** \brief Neighborhood area */
    NMAMapLayerCategoryNeighborhoodArea,
    /** \brief Land parcel */
    NMAMapLayerCategoryLandParcel,
    /** \brief Continent label */
    NMAMapLayerCategoryLabelContinent,
    /** \brief Major country label */
    NMAMapLayerCategoryLabelMajorCountry,
    /** \brief Minor country label */
    NMAMapLayerCategoryLabelMinorCountry,
    /** \brief State label */
    NMAMapLayerCategoryLabelState,
    /** \brief State abbreviation label */
    NMAMapLayerCategoryLabelStateAbbreviation,
    /** \brief National capital city label */
    NMAMapLayerCategoryLabelCityCapital,
    /** \brief Provincial/State capital city label */
    NMAMapLayerCategoryLabelCityStateCapital,
    /** \brief Other cities label */
    NMAMapLayerCategoryLabelCityOther,
    /** \brief Neighborhood area label */
    NMAMapLayerCategoryLabelNeighborhoodArea,
    /** \brief Public transit line */
    NMAMapLayerCategoryPublicTransitLine,
    /** \brief Public transit line label */
    NMAMapLayerCategoryLabelPublicTransitLine,
    /** \brief Public transit icon */
    NMAMapLayerCategoryIconPublicTransitStation,
    /** \brief Public transit label */
    NMAMapLayerCategoryLabelPublicTransitStation,
    /** \brief Relief */
    NMAMapLayerCategoryRelief,
    /** \brief Background */
    NMAMapLayerCategoryBackground,
    /** \brief Mountain label */
    NMAMapLayerCategoryLabelMountain,
    /** \brief Mountain icon */
    NMAMapLayerCategoryIconMountain,
    /** \brief Island label */
    NMAMapLayerCategoryLabelIsland,
    /** \brief Building */
    NMAMapLayerCategoryBuilding,
    /** \brief Building label */
    NMAMapLayerCategoryLabelBuilding,
    /** \brief Point addresses, alphanumeric house-numbers which are assigned to a street segment. */
    NMAMapLayerCategoryPointAddress,
    /** \brief Pedestrian features that includes: crosswalk, stairs, escalator, elevator, tunnel, and bridge */
    NMAMapLayerCategoryPedestrianFeature,
    /** \brief Railroad */
    NMAMapLayerCategoryRailroad,
    /** \brief Ferry */
    NMAMapLayerCategoryFerry,
    /** \brief Ferry label */
    NMAMapLayerCategoryLabelFerry,
    /** \brief POI icon */
    NMAMapLayerCategoryPoiIcon,
    /** \brief POI label */
    NMAMapLayerCategoryPoiLabel,
    /** \brief Category count */
    NMAMapLayerCategoryCount,
    /** \brief Category None */
    NMAMapLayerCategoryNone
};

/**
 * Defines POI (Point of Interest) categories
 */
typedef NS_ENUM(NSInteger, NMAMapPoiCategory) {
    /** \brief Airline access points. */
    NMAMapPoiCategoryAirLineAccess,
    /** \brief Amusement parks. */
    NMAMapPoiCategoryAmusementPark,
    /** \brief Car dealerships. */
    NMAMapPoiCategoryCarDealer,
    /** \brief Casinos. */
    NMAMapPoiCategoryCasino,
    /** \brief Movie houses. */
    NMAMapPoiCategoryCinema,
    /** \brief Companies. */
    NMAMapPoiCategoryCompany,
    /** \brief Concert halls. */
    NMAMapPoiCategoryConcertHall,
    /** \brief Congressional houses. */
    NMAMapPoiCategoryCongress,
    /** \brief Courthouses. */
    NMAMapPoiCategoryCourthouse,
    /** \brief Cultural centers. */
    NMAMapPoiCategoryCulturalCentre,
    /** \brief Exhibition centers. */
    NMAMapPoiCategoryExhibitionCentre,
    /** \brief Golf courses. */
    NMAMapPoiCategoryGolfCourse,
    /** \brief Government offices. */
    NMAMapPoiCategoryGovernmentOffice,
    /** \brief Holiday parks. */
    NMAMapPoiCategoryHolidayPark,
    /** \brief Museums. */
    NMAMapPoiCategoryMuseum,
    /** \brief Opera houses. */
    NMAMapPoiCategoryOpera,
    /** \brief Parking garages. */
    NMAMapPoiCategoryParkingGarage,
    /** \brief Gas stations. */
    NMAMapPoiCategoryPetrolStation,
    /** \brief Churches and other places of worship. */
    NMAMapPoiCategoryPlaceOfWorship,
    /** \brief Post offices. */
    NMAMapPoiCategoryPostOffice,
    /** \brief Car rental facilities. */
    NMAMapPoiCategoryRentACarFacility,
    /** \brief Rest areas. */
    NMAMapPoiCategoryRestArea,
    /** \brief Restaurants. */
    NMAMapPoiCategoryRestaurant,
    /** \brief Shops. */
    NMAMapPoiCategoryShop,
    /** \brief Shopping centers. */
    NMAMapPoiCategoryShoppingCentre,
    /** \brief Stadiums. */
    NMAMapPoiCategoryStadium,
    /** \brief Theaters. */
    NMAMapPoiCategoryTheatre,
    /** \brief Tourist attractions. */
    NMAMapPoiCategoryTouristAttraction,
    /** \brief Tourist information centers. */
    NMAMapPoiCategoryTouristInformationCentre,
    /** \brief Universities. */
    NMAMapPoiCategoryUniversity,
    /** \brief Zoos. */
    NMAMapPoiCategoryZoo,
    /** \brief Libraries. */
    NMAMapPoiCategoryLibrary,
    /** \brief Camping grounds. */
    NMAMapPoiCategoryCamping,
    /** \brief Bars and discos. */
    NMAMapPoiCategoryBarDisco,
    /** \brief Embassies. */
    NMAMapPoiCategoryEmbassy,
    /** \brief Ferry terminals. */
    NMAMapPoiCategoryFerryTerminal,
    /** \brief Frontier crossings. */
    NMAMapPoiCategoryFrontierCrossing,
    /** \brief Hostpitals. */
    NMAMapPoiCategoryHospital,
    /** \brief Hotels. */
    NMAMapPoiCategoryHotel,
    /** \brief Parking areas (lots). */
    NMAMapPoiCategoryParkingArea,
    /** \brief Police stations. */
    NMAMapPoiCategoryPolice,
    /** \brief Railway stations. */
    NMAMapPoiCategoryRailwayStation,
    /** \brief Metro (subway) stations. */
    NMAMapPoiCategoryMetroStation,
    /** \brief Airports. */
    NMAMapPoiCategoryAirport,
    /** \brief Mountain passes. */
    NMAMapPoiCategoryMountainPass,
    /** \brief Mountain peaks. */
    NMAMapPoiCategoryMountainPeak,
    /** \brief Car repair businesses. */
    NMAMapPoiCategoryCarrepair,
    /** \brief Cash dispensers (banking machines). */
    NMAMapPoiCategoryCashDispenser,
    /** \brief Parks and similar recreation areas. */
    NMAMapPoiCategoryParkRecreation,
    /** \brief Pharmacies. */
    NMAMapPoiCategoryPharmacy,
    /** \brief Beaches. */
    NMAMapPoiCategoryBeach,
    /** \brief Bus stations. */
    NMAMapPoiCategoryBusStation = 57,
    /** \brief Education facilities. */
    NMAMapPoiCategoryEducation = 106,
    /** \brief Residential areas. */
    NMAMapPoiCategoryResidentialArea = 117,
    /** \brief Nightclubs. */
    NMAMapPoiCategoryNightClub = 203,
    /** \brief Public washrooms. */
    NMAMapPoiCategoryPublicToilet = 204,
    /** \brief Laundries. */
    NMAMapPoiCategoryLaundry = 207,
    /** \brief Taxi stands. */
    NMAMapPoiCategoryTaxiStand = 216,
    /** \brief Railway access points. */
    NMAMapPoiCategoryRailwayAccess = 217,
    /** \brief Bars and cafes. */
    NMAMapPoiCategoryBarsCafes = 218,
    /** \brief Parking areas (street). */
    NMAMapPoiCategoryParking = 219,
    /** \brief Outdoor sport venues. */
    NMAMapPoiCategorySportOutdoor = 220,
    /** \brief Metro access. */
    NMAMapPoiCategoryMetroAccess = 221,
    /** \brief Metro access points in Austria. */
    NMAMapPoiCategoryAutMetroAccess = 222,
    /** \brief Metro stops in Austria. */
    NMAMapPoiCategoryAutMetroStop = 223,
    /** \brief Metro access points in Belgium. */
    NMAMapPoiCategoryBelMetroAccess = 224,
    /** \brief Metro stops in Belgium. */
    NMAMapPoiCategoryBelMetroStop = 225,
    /** \brief Metro access points in Czech Republic. */
    NMAMapPoiCategoryCzeMetroAccess = 226,
    /** \brief Metro stops in Czech Republic. */
    NMAMapPoiCategoryCzeMetroStop = 227,
    /** \brief Metro access points in Denmark. */
    NMAMapPoiCategoryDenMetroAccess = 228,
    /** \brief Metro stops in Denmark. */
    NMAMapPoiCategoryDenMetroStop = 229,
    /** \brief Metro access points in Finland. */
    NMAMapPoiCategoryFinMetroAccess = 230,
    /** \brief Metro stops in Finland. */
    NMAMapPoiCategoryFinMetroStop = 231,
    /** \brief Metro access points in France. */
    NMAMapPoiCategoryFraMetroAccess = 232,
    /** \brief Metro stops in France. */
    NMAMapPoiCategoryFraMetroStop = 233,
    /** \brief RER access points in France. */
    NMAMapPoiCategoryFraRerAccess = 234,
    /** \brief RER stops in France. */
    NMAMapPoiCategoryFraRerStop = 235,
    /** \brief Metro access points in Germany. */
    NMAMapPoiCategoryDeuMetroAccess = 236,
    /** \brief Metro stops in Germany. */
    NMAMapPoiCategoryDeuMetroStop = 237,
    /** \brief S-Bahn access points in Germany. */
    NMAMapPoiCategoryDeuSbahnAccess = 238,
    /** \brief S-Bahn stops in Germany. */
    NMAMapPoiCategoryDeuSbahnStop = 239,
    /** \brief Metro access points in Italy. */
    NMAMapPoiCategoryItaMetroAccess = 240,
    /** \brief Metro stops in Italy. */
    NMAMapPoiCategoryItaMetroStop = 241,
    /** \brief Metro access points in Norway. */
    NMAMapPoiCategoryNorMetroAccess = 242,
    /** \brief Metro stops in Norway. */
    NMAMapPoiCategoryNorMetroStop = 243,
    /** \brief Metro access points in Portugal. */
    NMAMapPoiCategoryPrtMetroAccess = 244,
    /** \brief Metro stops in Portugal. */
    NMAMapPoiCategoryPrtMetroStop = 245,
    /** \brief Metro access points in Barcelona. */
    NMAMapPoiCategoryEspBarcelonaMetroAccess = 246,
    /** \brief Metro stops in Barcelona. */
    NMAMapPoiCategoryEspBarcelonaMetroStop = 247,
    /** \brief Metro access points in Cercanias. */
    NMAMapPoiCategoryEspCercaniasMetroAccess = 248,
    /** \brief Metro stops in Cercanias. */
    NMAMapPoiCategoryEspCercaniasMetroStop = 249,
    /** \brief Metro access points in Madrid. */
    NMAMapPoiCategoryEspMadridMetroAccess = 250,
    /** \brief Metro stops in Madrid. */
    NMAMapPoiCategoryEspMadridMetroStop = 251,
    /** \brief Metro access points in Sweden. */
    NMAMapPoiCategorySweMetroAccess = 252,
    /** \brief Metro stops in Sweden. */
    NMAMapPoiCategorySweMetroStop = 253,
    /** \brief Metro access points in Glasgow. */
    NMAMapPoiCategoryGbrGlasgowMetroAccess = 254,
    /** \brief Metro stops in Glasgow. */
    NMAMapPoiCategoryGbrGlasgowMetroStop = 255,
    /** \brief Metro access points in London. */
    NMAMapPoiCategoryGbrLondonMetroAccess = 256,
    /** \brief Metro stops in London. */
    NMAMapPoiCategoryGbrLondonMetroStop = 257,
    /** \brief All points of interest. */
    NMAMapPoiCategoryAll  = 258
};


#pragma mark - Types

/**
 * \brief Defines a block type used to implement a function that provides a tilt value
 * output for a zoom level input.
 *
 * Tilt/zoom profiles are used to control the minimum and maximum tilt allowed on a map
 * view at a given zoom level. The block takes an input zoom level that will be in the
 * range [NMAMapViewMinimumZoomLevel, NMAMapViewMaximumZoomLevel]. The output should be
 * a tilt value in the range [0, NMAMapViewMaximumTilt].
 *
 * \sa maximumTiltProfile
 */
typedef float (^NMATiltZoomProfile)(float zoomLevel);

/**
 * \brief Used to provide custom responses to map events.
 *
 * NMAMapEventBlocks are used with the
 * \link NMAMapView::respondToEvents:withBlock:\endlink
 * method
 * to provide custom event handling behaviour. Refer to the documentation of that
 * method for more information.
 *
 * \param event The type of the event that has occurred.
 * \param mapView The map view which generated the event.
 * \param eventData An optional object containing information about the event.
 *
 * \return YES if the block should continue to handler the input event type, NO if it
 * should not.
 *
 * \sa NMAMapView::respondToEvents:withBlock:
 * \sa NMAMapEvent
 */
typedef BOOL (^NMAMapEventBlock)(NMAMapEvent event, NMAMapView *mapView, id eventData);



#pragma mark -

/**
 * Represents a delegate that offers listeners and callback methods related to
 * visible actions that result from user interaction.
 *
 * \note Methods of this protocol are called on the main queue.
 */
@protocol NMAMapViewDelegate<NSObject>
@optional
/*!
 * A callback indicating that %NMAMapObject map objects have been
 * selected.
 *
 * \param mapView The NMAMapView instance sending the callback
 * \param objects A %NSArray of selected map objects
 */
- (void)mapView:(NMAMapView *)mapView didSelectObjects:(NSArray *)objects;

/*!
 * A callback indicating that a map movement has begun due to user
 * interaction.
 *
 * \note This callback will be sent at the start of the gesture when the map is
 * panned, tilted, pinch zoomed, or rotated (only for user gestures).
 *
 * \note If the map receives more than one of these gestures at the same time,
 * only a single callback will be sent until all map movement has stopped.
 */
- (void)mapViewDidBeginMovement:(NMAMapView *)mapView;

/*!
 * A callback indicating that a map movement has ended.
 *
 * \note There will be a one-to-one correspondence with this callback and the
 * mapViewDidBeginMovement callback.
 */
- (void)mapViewDidEndMovement:(NMAMapView *)mapView;

/*!
 *  A callback indicating the beginning of an animation on the map.
 *
 * \note This is fired after one of the following operations starts:
 * <ul>
 * <li>setting the map center (with animation). E.g. with NMAMapView setCenter:</li>
 * <li>setting the map orientation (with animation). E.g. with NMAMapView setOrientation:</li>
 * <li>setting the map tilt (with animation). E.g. with NMAMapView setTilt:</li>
 * <li>setting the map zoom level (with animation). E.g. with NMAMapView setZoomLevel:</li></ul>
 */
- (void)mapViewDidBeginAnimation:(NMAMapView *)mapView;

/*!
 * A callback indicating the end of an animation on the map.
 *
 * This is fired after one of the following operations ends:
 * <ul>
 * <li>setting the map center (with animation). E.g. with NMAMapView setCenter:</li>
 * <li>setting the map orientation (with animation). E.g. with NMAMapView setOrientation:</li>
 * <li>setting the map tilt (with animation). E.g. with NMAMapView setTilt:</li>
 * <li>setting the map zoom level (with animation). E.g. with NMAMapView setZoomLevel:</li></ul>
 */
- (void)mapViewDidEndAnimation:(NMAMapView *)mapView;

/*!
 * A callback indicating that map data has been drawn.
 */
- (void)mapViewDidDraw:(NMAMapView *)mapView;

@end


#pragma mark -


/**
 * \class NMAMapView NMAMapView.h "NMAMapView.h"
 *
 * A UIView subclass used by an application to display a geographical map.
 *
 * The NMAMapView will recognize and respond to a number of different gestures,
 * which are described by the NMAMapGestureType enum. Subviews of the map may
 * optionally receive these gestures instead of the map (see NMAMapGestureDelegate).
 *
 * \note Views which depend on receiving touch events (such as UIButton) should not
 * be installed as NMAMapView subviews, but rather as siblings in the view hierarchy.
 *
 * \note NMAMapView requires valid authentication credentials to be set via
 * NMAApplicationContext. If valid credentials are not present the API may not
 * function correctly or may stop functioning correctly in the future when server
 * side configurations change.
 */
@interface NMAMapView : UIView

#pragma mark Setup

/**
 * Used to control the default %NMAMapView rendering behaviour.
 *
 * This class method is used to set whether or not instances of %NMAMapView will
 * begin rendering immediately upon creation. Any map view created after passing
 * NO to this method must have its renderAllowed property set to YES to begin
 * rendering.
 */
+ (void)shouldBeginRenderingAutomatically:(BOOL)enabled;

/*!
 * Default initializer of a %NMAMapView.
 * </p>
 * <ul>
 * <li>The %NMAMapView must have a container view.</li>
 * <li>Use the -[NMAMapView initWithFrame:] method with the frame acting as the
 * bounds of the container view.</li>
 * <li>The container view must have its property \p autoresizesSubviews = YES.</li>
 * <li>The map view must have its property \p autoresizingMask =
 * UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight</li>
 * </ul>
 * <p>
 * Example:
 *
 * \code
 *
 * IBOutlet UIView* _parentOfMapView; // Parent view is necessary to set the correct z-order.
 * NMAMapView* mapView;
 * ---
 * mapView = [[NMAMapView alloc] initWithFrame:_parentOfMapView.frame];
 * [_parentOfMapView addSubview:mapView];
 *
 * _parentOfMapView.autoresizesSubviews = YES;
 * mapView.autoresizingMask = UIViewAutoresizingFlexibleWidth |
 * UIViewAutoresizingFlexibleHeight;
 * \endcode
 *
 * \note If the frame of the NMAMapView is much larger than the main window
 * of the UIApplication its rendering will be very slow and could give the impression of a frozen UI.
 */
- (id)initWithFrame:(CGRect)frame;

#pragma mark Behavior

/*!
 * A flag which can be used to allow or disallow map rendering.
 *
 * \note Setting renderAllowed to NO guarantees that the map will not draw
 * again (but it will finish if a frame is in the middle of rendering), but
 * the map may not redraw with renderAllowed set to YES if it is prevented
 * from drawing for another reason.
 *
 * \note The map can be hinted to redraw (if allowed) by calling setNeedsDisplay.
 */
@property (nonatomic, getter = isRenderAllowed) BOOL renderAllowed;

/**
 * Controls whether the map view automatically pauses rendering when the
 * willResignActive notification is received.
 *
 * If pauseOnWillResignActive is set to NO, it is highly recommended that the
 * mapView renderAllowed property is set to NO before the application delegate
 * didEnterBackground method returns.
 *
 * The default value is YES.
 */
@property (nonatomic) BOOL pauseOnWillResignActive;

/**
 * An event handler for the NMAMapView.
 * <p>
 * An object may be installed as the NMAMapView's delegate in order to respond
 * to certain map events, such as object selection or map movement. See the
 * NMAMapViewDelegate protocol for the full list of events.
 * </p>
 */
@property (nonatomic, weak) id<NMAMapViewDelegate> delegate;

/**
 * Provides a block of code to be executed upon the occurrence of one or more
 * map events.
 *
 * While using an NMAMapView, an application might need to respond to certain map
 * events that occur, such as map transformations or the beginning or ending of map
 * gestures or animations. This method provides a mechanism by which an application
 * may provide an arbitrary block of code to be executed in response to certain map
 * events.
 *
 * The same block may be used to respond to multiple events. The parameters passed to
 * the event block include the event type, the map which generated the event, and
 * optional event data. The event block returns a BOOL to indicate whether the block
 * should continue to respond to the given event type. If a block no longer responds
 * to any events, it is destroyed.
 *
 * Each block is assigned a unique integer identifier, returned by this method. The
 * identifier may be used to stop the block from responding to events without waiting
 * for those events to be triggered, using the method
 * \link NMAMapView::removeEventBlockWithIdentifier:\endlink.
 *
 * When creating event handler blocks, care should be taken to avoid retain cycles.
 * Any objects strongly referenced in the block will never be released as long as the
 * block remains. This includes any explicit or implicit (e.g. through an instance
 * variable) references to self. Ensure that any strongly referenced objects inside
 * the block are meant to live as long as the block does; if not, use a weak reference.
 *
 * \note Event blocks will always be invoked on the application's main thread.
 *
 * \note Blocks which respond to frequent events (e.g. NMAMapEventGeoCenterChanged)
 * should not perform any CPU-intensive work to avoid performance degradation.
 *
 * \param events A bit-wise OR combination of NMAMapEvent values.
 * \param block The NMAMapEventBlock to respond to the given events.
 *
 * \return A unique integer value to identify the block.
 *
 * \sa NMAMapEvent
 * \sa \link NMAMapView::removeEventBlockWithIdentifier:\endlink
 */
- (NSInteger)respondToEvents:(NSInteger)events withBlock:(NMAMapEventBlock)block;

/**
 * Removes the event block with the given identifier.
 *
 * To explicitly control when an event block is removed from the map, the
 * identifier returned by
 * \link NMAMapView::respondToEvents:withBlock:\endlink
 * should be stored until needed and then passed to this method.
 *
 * \note Do not call this method from inside the block to which the identifier is assigned.
 *
 * \return YES if the block was successfully removed, NO otherwise.
 *
 */
- (BOOL)removeEventBlockWithIdentifier:(NSInteger)identifier;


#pragma mark Appearance

/**
 * The %CGRect representing the %NMAMapView clipping rectangle.
 *
 * This property allows the user to restrict the rendered size of the NMAMapView
 * without changing its frame size. The area outside the bounds of the
 * %CGRect is colored in the default map background color.
 * </p>
 * <p>
 * This property should be used when a known fixed region of the %NMAMapView will
 * be obscured for a significant amount of time, such as by a subview or popup menu.
 * </p>
 *
 * \note The clipRect is not allowed to exceed the bounds of the %NMAMapView frame,
 * and the supplied CGRect will be clipped as necessary to ensure this. If a value
 * is supplied which does not overlap the map frame, the clipRect is not changed.
 */
@property (nonatomic) CGRect clipRect;

/**
 * The %NMAGeoBoundingBox representing the current screen area of the
 * NMAMapView.
 *
 * The boundingBox of the map is the smallest possible NMAGeoBoundingBox which
 * contains all of the map area currently visible on the screen. If the map is
 * in 2D view (zero tilt), the boundingBox should (nearly) exactly coincide
 * with the bounds of the screen rect. If the map is in 3D view, the visible
 * screen area is a trapezoid in geographical space (the visible area is wider
 * at the top of the screen than at the bottom due to perspective). Thus, the
 * bounding box will contain some area that is not actually visible on the
 * screen in this case.
 *
 * \note The bounding box may be slightly inaccurate if the method is
 * invoked while the map is moving.
 */
@property (nonatomic, readonly, weak) NMAGeoBoundingBox *boundingBox;

/**
 * The scheme for the %NMAMapView.
 *
 * See NMAMapScheme for supported schemes.
 */
@property (nonatomic, strong) NSString *mapScheme;

/**
 * The projection method used to display the map.
 *
 * The default projection type is NMAProjectionTypeGlobe.
 *
 * \sa NMAProjectionType
 */
@property (nonatomic) NMAProjectionType projectionType;

/**
 * The position indicator for the %NMAMapView.
 */
@property (nonatomic, readonly) NMAPositionIndicator *positionIndicator;

/**
 * Indicates 3D landmark visibility for the %NMAMapView.
 *
 * Landmarks not visible if access to this operation is denied.
 * Contact your HERE representative for more information.
 */
@property (nonatomic) BOOL landmarksVisible;


/**
 * Show fleet features of the specified type on the map.
 *
 * By default all fleet features are hidden.
 *
 * @param fleetFeature NMAMapFleetFeatureType to show.
 */
- (void)showFleetFeature:(NMAMapFleetFeatureType)fleetFeature;

/**
 * Hide fleet features of the specified type from the map.
 *
 * By default all fleet features are hidden.
 *
 * @param fleetFeature NMAMapFleetFeatureType to hide.
 */
- (void)hideFleetFeature:(NMAMapFleetFeatureType)fleetFeature;

/**
 * Returns whether a fleet feature type is set to be shown on the map.
 *
 * By default all fleet features are hidden.
 *
 * @param fleetFeature NMAMapFleetFeatureType to query.
 * @return YES if fleet features of the type specified are set to be shown on the map.
 */
- (BOOL)isFleetFeatureShown:(NMAMapFleetFeatureType)fleetFeature;

/**
 * Access venue3d map layer.
 *
 * \sa NMAVenue3dMapLayer
 *
 */
@property (nonatomic, readonly) NMAVenue3dMapLayer *venue3dMapLayer;

/**
 * Create a customizable Scheme. Please note this change is not permanently saved and valid
 * only with application life cycle.
 *
 * \param schemeName
 *            Name of the new scheme which you want to create.
 *
 * \param baseSchemeName
 *            Name of base scheme. New scheme will be derived from this base scheme. Base scheme
 *            should be one from {@link #mapScheme}
 * \return NMACustomizableScheme instance, or nil if the creation failed.
 * \note Creating a scheme may fail if the provided name was already used, or if deriving from a base
 * scheme which does not exist.
 */
- (NMACustomizableScheme *)createCustomizableSchemeWithName:(NSString *)schemeName basedOnScheme:(NSString *)baseSchemeName;

/**
 * Returns an %NMACustomizableScheme object that points to an existing custom scheme of the given name.
 *
 * @param schemeName the respective name of the scheme.
 * \note The custom scheme must have been previously created with method
 * \link NMAMapView::createCustomizableSchemeWithName:basedOnScheme:\endlink
 * otherwise it will fail returning nil.
 */
- (NMACustomizableScheme *)getCustomizableSchemeWithName:(NSString *)schemeName;

/**
 * \brief Removes the custom scheme with the specified name from the map
 *
 * @param schemeName the respective name of the scheme
 * \return BOOL True if succeeds, False if failed
 * \note This reverts the operation from
 * \link NMAMapView::createCustomizableSchemeWithName:basedOnScheme:\endlink
 */
- (BOOL)removeCustomizableSchemeWithName:(NSString *)schemeName;

/**
 * Show pedestrian features of the specified type on the map.
 *
 * By default all pedestrian features are hidden.
 *
 * @param pedestrianFeature NMAMapPedestrianFeatureType to show.
 *
 * \note Even if pedestrian features are set to be shown they will not actually be rendered if the
 * mapScheme property is set to a "Car Navaigation" scheme (e.g. NMAMapSchemeCarNavigationDay).
 */
- (void)showPedestrianFeature:(NMAMapPedestrianFeatureType)pedestrianFeature;

/**
 * Hide pedestrian features of the specified type from the map.
 *
 * By default all pedestrian features are hidden.
 *
 * @param pedestrianFeature NMAMapPedestrianFeatureType to hide.
 */
- (void)hidePedestrianFeature:(NMAMapPedestrianFeatureType)pedestrianFeature;

/**
 * Returns whether a pedestrian feature type is set to be shown on the map, whether the
 * feature is actually rendered is dependent on the mapScheme property.
 *
 * By default all pedestrian features are hidden.
 *
 * @param pedestrianFeature NMAMapPedestrianFeatureType to query.
 * @return YES if pedestrian features of the type specified are set to be shown on the map.
 *
 * \note Even if pedestrian features are set to be shown they will not actually be rendered if the
 * mapScheme property is set to a "Car Navaigation" scheme (e.g. NMAMapSchemeCarNavigationDay).
 */
- (BOOL)isPedestrianFeatureShown:(NMAMapPedestrianFeatureType)pedestrianFeature;

/*!
 * Set the visibility of the map layer categories to be rendered.
 *
 * The layer categories are specified using the NMAMapLayerCategory enum.
 *
 * \param visible YES to make map layer categories visible, NO to hide.
 * \param layerCategories An array of NSNumber objects containing NMAMapLayerCategory values.
 *
 * \note Only the specified map layer categories visibility are changed, the
 * visibility of all other map layer categories will remain the same.
 */
- (void)setVisibility:(BOOL)visible forMapLayerCategories:(NSArray *)layerCategories;

/**
 * Get the set of visible map layer categories.
 *
 * \return An NSArray of NSNumber objects containing the NMAMapLayerCategory values.
 */
- (NSArray *)visibleMapLayerCategories;


/*!
 * Indicates if safety spots are visible on the map.
 *
 * Defaults to NO.
 *
 * Safety spots can not be set visible if access to this operation is denied.
 * Contact your HERE representative for more information.
 */
@property (nonatomic) BOOL safetySpotsVisible;

/*!
 * Check the visibility of a specific map layer category.
 *
 * \param layerCategory A specific map layer category.
 * \return YES if the map layer category is visible, NO otherwise.
 */
- (BOOL)isMapLayerCategoryVisible:(NMAMapLayerCategory)layerCategory;

/**
 * Set the visibility of a specific POI on the map.
 *
 * \param visible YES if POI is visible, NO otherwise.
 * \param poiCategory A specific POI category.
 * \return YES if enable or disable POI category successfully, NO otherwise.
 *
 * \note NMAMapPoiCategoryAll may be used to show or hide all POIs.
 */
- (BOOL)setVisibility:(BOOL)visible forPoiCategory:(NMAMapPoiCategory)poiCategory;

/**
 * Check the visibility of a specific POI on the map.
 *
 * \param poiCategory A specific POI category.
 * \return YES if POI is visible, NO otherwise
 */
- (BOOL)isPoiCategoryVisible:(NMAMapPoiCategory)poiCategory;

/**
 * Get the list of poi categories.
 *
 * \return A list of NSStrings.
 */
- (NSArray *)poiCategories;

/**
 * Control whether or not extruded buildings are visible on the map.
 *
 * \note If set to YES, extruded buildings will be shown on the map. NO otherwise.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
@property (nonatomic, readwrite) BOOL extrudedBuildingsVisible;


#pragma mark Gestures

/**
 * An optional delegate to process gestures on behalf of the map view.
 *
 * Replace this property with a custom class implementing the NMAMapGestureDelegate
 * protocol to customize the gesture response behaviour of the map. Set to nil
 * to restore the original gesture behaviour.
 *
   \sa NMAMapGestureDelegate
 */
@property (nonatomic, weak) id<NMAMapGestureDelegate> gestureDelegate;

/**
 * Provides default gesture handling behaviour for the NMAMapView from
 * within a custom gesture handling method.
 *
 * The gestureHandler can be used to perform
 * default gesture actions in addition to the gestureDelegate's custom
 * behaviour.
 *
 * Default actions are performed by calling the appropriate gesture handling
 * method from within the gestureDelegate's custom implementation of that method.
 * For example, to perform the default tap action in addition to custom behaviour,
 * implement the NMAMapGestureDelegate method in your gestureDelegate class as follows:
 *
 * \code
 *  -(void)mapView:(NMAMapView *)mapView didReceiveTapAtLocation:(CGPoint)location
 *  {
 *      // Some custom behaviour...
 *      [mapView.defaultGestureHandler mapView:mapView didReceiveTapAtLocation:location];
 *      // More custom behaviour...
 *  }
 * \endcode
 */
@property (nonatomic, readonly) id<NMAMapGestureDelegate> defaultGestureHandler;

/**
 * Controls the type of gesture response used by the NMAMapView.
 *
 * If the map view is set to use gesture recognizers, gesture recognition is
 * performed with the use of the UIGestureRecognizer class from UIKit.
 * Otherwise, the touch events received by the NMAMapView are interpreted
 * directly.
 *
 * \note The default value is NO.
 *
 * \deprecated As of SDK 3.2. All recognizer-based callbacks were removed.
 * This attribute will always have a value NO.
*/
@property (nonatomic) BOOL usesGestureRecognizers DEPRECATED_ATTRIBUTE;

/**
 * Indicates the state of enabling and modifying map gesture interaction
 * for the %NMAMapView.
 * <p>
 * If enabled, gesture handlers can be enabled to begin gesture handling. If
 * disabled, all gesture handling is disabled and the gesture handler state
 * cannot be modified.</p>
 */
@property (nonatomic, getter = isMapInteractionEnabled) BOOL mapInteractionEnabled;

/**
 * The touch duration required to trigger a long press gesture.
 *
 * \note The default value is 1 second.
 */
@property (nonatomic) NSTimeInterval longPressDuration;

/**
 * Indicates the kinetic panning behaviour of the %NMAMapView.
 *
 * When kinetic panning is enabled, at the conclusion of a pan gesture (when the user's
 * finger is removed from the device), the map will continue moving in the direction
 * and with the speed of the original pan before gradually coming to a stop.
 */
@property (nonatomic, getter = isKineticPanningEnabled) BOOL kineticPanningEnabled;

/**
 * Indicates whether the transform center is used on rotate and zoom gestures.
 *
 * By default disabled. If enabled, rotation and zoom will always be applied using
 * the current transform center, instead of a point relative the touch interaction.
 *
 * \note The transform center is usually the same as the screen's geometric center,
 * except in cases where it makes sense to have it slightly modified (example: in
 * guidance mode, the transform center is lowered a bit so that the route ahead
 * is more visible in the map view).
 */
@property (nonatomic) BOOL mapCenterFixedOnRotateZoom;

/**
 * Controls which two-finger pan direction increases the tilt value of the %NMAMapView.
 *
 * If YES, a two-finger pan gesture from the bottom to the top of the map will
 * increase the tilt angle. In other words, the viewing angle changes to a more apparent
 * 3D view.
 *
 * If NO, such a gesture will decrease the tilt angle.
 *
 * \note The default value is NO.
 */
@property (nonatomic) BOOL upwardPanIncreasesTilt;

/**
 * Enables changing the tilt angle of the %NMAMapView using a two finger pan.
 *
 * If YES, a two-finger pan with horizontal finger placement and vertical pan
 * direction will change the tilt angle.
 *
 * If NO, all two-finger pans will be treated the same as one-finger pans by
 * default. Custom two-finger pan behavior can still be implemented using
 * NMAMapGestureDelegate.
 *
 * \note The default value is YES.
 */
@property (nonatomic) BOOL twoFingerPanTiltingEnabled;


/*!
 * Enable one or more NMAMapView gestures.
 *
 * \param gestures A bit-mask combination of one or more NMAMapGestureType values.
 *
 * \note All gestures are enabled by default.
 *
 * \note Pass NMAMapGestureTypeAll to enable all gestures.
 */
- (void)enableMapGestures:(NMAMapGestureType)gestures;

/*!
 * Disable one or more NMAMapView gestures.
 *
 * \param gestures A bit-mask combination of one or more NMAMapGestureType values.
 *
 * \note Pass NMAMapGestureTypeAll to disable all gestures.
 *
 * \note Disabling a gesture type will also disable that type for the NMAMapView's
 * gestureDelegate, but subviews of the map will still receive that gesture type.
 */
- (void)disableMapGestures:(NMAMapGestureType)gestures;

/*!
 * Queries whether or not a gesture type is enabled on the %NMAMapView.
 *
 * \param gesture The gesture type to query.
 */
- (BOOL)isMapGestureEnabled:(NMAMapGestureType)gesture;

#pragma mark Transformation

/**
 * The %NMAGeoCoordinates of the world location corresponding to the
 * current screen position of the transformCenter.
 */
@property (nonatomic) NMAGeoCoordinates *geoCenter;

/**
 * A measure of the apparent size of geographic features on the screen.
 *
 * The zoom level determines how "close" the map view is to the surface
 * of the Earth. Higher zoom levels give a closer view. An approximate
 * description of the appearance of various zoom levels is given below:
 * <ul>
 * <li> 0 - World level
 * <li> 3 - Continent level
 * <li> 5 - Country level
 * <li> 10 - City level
 * <li> 15 - Block level
 * <li> 18 - Street level
 * </ul>
 *
 * Zoom level values must be in the range [NMAMapViewMinimumZoomLevel,
 * NMAMapViewMaximumZoomLevel]; invalid values will be clamped to this
 * range. In addition to this fixed limit, the actual minimum zoom level
 * allowed for a map will depend on display parameters such as the size
 * of the map view and the PPI of the device.
 *
 * \sa \link NMAMapView::minimumZoomLevel \endlink
 */
@property (nonatomic) float zoomLevel;

/**
 * The current effective minimum zoom level of the map view.
 *
 * The effective minimum zoom level depends on the current display
 * parameters of the map and the device, and thus may change while
 * using the map. The value will never be lower than
 * NMAMapViewMinimumZoomLevel.
 */
@property (nonatomic, readonly) float minimumZoomLevel;

/**
 * The orientation for the %NMAMapView, in a range of degrees
 * between [0..360). Values outside this range will be clamped.
 *
 * By default, the map is oriented with north toward the top of the map
 * (zero degrees). As the orientation angle increases, the map rotates
 * counter-clockwise so that at 90 degrees, east is toward the top of the map.
 */
@property (nonatomic) float orientation;

/**
 * The desired tilt of the %NMAMapView in degrees.
 *
 * The tilt controls the perspective at which the map is viewed. A value of
 * zero degrees corresponds to looking straight down at the map from above.
 * As the tilt value is increased, the view shifts to a 3D perspective.
 * The tilt must be in the range [0, NMAMapViewMaximumTilt]. Values outside
 * this range will be clamped.
 *
 * The tilt of the map may be further constrained at some zoom levels. For
 * example, no tilt is allowed at the lowest zoom levels when the globe is
 * visible. This is to provide a better user experience when interacting
 * with globe, since viewing a "tilted" globe does give any benefit.
 *
 * The value specified here is the desired tilt, but the actual tilt used to
 * render the map will be different if the desired tilt exceeds the lower or
 * upper zoom-dependent limit. The actual tilt is given by the clippedTilt
 * property.
 *
 * The minimum and maximum allowed tilts at a given zoom level can be
 * accessed using the minimumTiltAtZoomLevel: and maximumTiltAtZoomLevel:
 * methods, respectively.
 */
@property (nonatomic) float tilt;

/**
 * The actual tilt used to render the map, in degrees.
 *
 * \sa tilt
 */
@property (nonatomic, readonly) float clippedTilt;

/**
 * The functonal relationship between zoom and maximum tilt.
 *
 * Using the maximumTiltProfile, an application may control the maximum tilt
 * of a map at different zoom levels. The maximum applies to all sources of
 * map tilt, including gestures and animations.
 */
@property (nonatomic, strong) NMATiltZoomProfile maximumTiltProfile;

/**
 * Returns the minimum allowed tilt at a given zoom level.
 */
- (float)minimumTiltAtZoomLevel:(float)zoomLevel;

/**
 * Returns the maximum allowed tilt at a given zoom level.
 */
- (float)maximumTiltAtZoomLevel:(float)zoomLevel;

#pragma mark Animation

/**
 * The point at which map movements and animations are centered.
 *
 * The transformCenter is a point within the bounds of the map that is
 * used to orient the map during transformations. For example, when one
 * of the setGeoCenter: methods is used, the specified geocoordinates will
 * be aligned with the transformCenter on the screen.
 *
 * The transformCenter is specified in relative coordinates in the range
 * {[0, 1], [0, 1]}, with {0, 0} representing the upper left corner of the
 * map and {1, 1} the lower right corner.
 *
 * \note The default value is {0.5, 0.5}.
 *
 * \note The center point of map movements caused by gestures will depend
 * on the touch locations of the gestures and not on the transformCenter.
 *
 * \note Values on or very near the edge of the map will be ignored.
 *
 * \note Values above the horizon will be ignored.
 */
@property (nonatomic) CGPoint transformCenter;

/*!
 * Sets the geoCenter of the map with optional animation.
 *
 * \param geoCenter The NMAGeoCoordinates at which the map is centered.
 * \param animationType The animation method used to display the transformation.
 */
- (void)setGeoCenter:(NMAGeoCoordinates *)geoCenter
       withAnimation:(NMAMapAnimation)animationType;

/*!
 * Sets the orientation of the map with optional animation.
 *
 * \param orientation The orientation at which to set the map.
 * \param animationType The animation method used to display the transformation.
 */
- (void)setOrientation:(float)orientation
         withAnimation:(NMAMapAnimation)animationType;

/*!
 * Sets the zoomLevel of the map with optional animation.
 *
 * \param zoomLevel The zoomLevel at which to set the map.
 * \param animationType The animation method used to display the transformation.
 */
- (void)setZoomLevel:(float)zoomLevel
       withAnimation:(NMAMapAnimation)animationType;

/*!
 * Sets the tilt of the map with optional animation.
 *
 * \param tilt The tilt at which to set the map.
 * \param animationType The animation method used to display the transformation.
 */
- (void)  setTilt:(float)tilt
    withAnimation:(NMAMapAnimation)animationType;

/*!
 * Simultaneously sets the geoCenter and zoomLevel of the map with optional
 * animation.
 *
 * Tilt and orientation are preserved.
 *
 * \param geoCenter The new geoCenter.
 * \param zoomLevel The new zoomLevel.
 * \param animationType The animation method used to display the transformation.
 */
- (void)setGeoCenter:(NMAGeoCoordinates *)geoCenter
           zoomLevel:(float)zoomLevel
       withAnimation:(NMAMapAnimation)animationType;

/*!
 * Simultaneously sets one or more map transformation properties with optional
 * animation.
 *
 * Any combination of new properties may be passed to this method. To leave a property
 * unchanged, pass nil (geoCenter) or NMAMapViewPreserveValue (zoomLevel, orientation,
 * tilt) for that property.
 *
 * \param geoCenter The new geoCenter.
 * \param zoomLevel The new zoomLevel.
 * \param orientation The new orientation.
 * \param tilt The new tilt.
 * \param animationType The animation method used to display the transformation.
 */
- (void)setGeoCenter:(NMAGeoCoordinates *)geoCenter
           zoomLevel:(float)zoomLevel
         orientation:(float)orientation
                tilt:(float)tilt
       withAnimation:(NMAMapAnimation)animationType;

/*!
 * Positions the NMAMapView so that the specified world location coincides
 * with the specified screen location.
 *
 * \note The screen point must be within the bounds of the map view.
 *
 * \note Due to the curvature of the Earth, positioning may be inaccurate at
 * low zoom levels.
 *
 * \param coordinates The world location
 * \param point The screen location
 * \param animation The NMAMapAnimation type to use while moving the map
 */
- (void)setGeoCoordinates:(NMAGeoCoordinates *)coordinates
                  toPoint:(CGPoint)point
            withAnimation:(NMAMapAnimation)animation;

/*!
 * Positions the NMAMapView so that the specified world location coincides
 * with the specified screen location.
 *
 * \note The screen point must be within the bounds of the map view.
 *
 * \note Due to the curvature of the Earth, positioning may be inaccurate at
 * low zoom levels.
 *
 * \param coordinates The world location
 * \param point The screen location
 * \param animation The NMAMapAnimation type to use while moving the map
 * \param zoomLevel Desired zoom level of the newly-centered %NMAMapView (pass
 *              NMAMapViewPreserveValue to keep the current zoom level)
 * \param orientation Desired orientation of the newly-centered %NMAMapView (pass
 *              NMAMapViewPreserveValue to keep the current orientation)
 * \param tilt Desired tilt angle of the newly-centered %NMAMapView (pass
 *             NMAMapViewPreserveValue to keep the current tilt)
 */
- (void)setGeoCoordinates:(NMAGeoCoordinates *)coordinates
                  toPoint:(CGPoint)point
            withAnimation:(NMAMapAnimation)animation
                zoomLevel:(float)zoomLevel
              orientation:(float)orientation
                     tilt:(float)tilt;

/*!
 * Sets the geo bounding box of the map view with optional animation.
 *
 * After this method completes, the full extents of the specified geo bounding
 * box will be visible in the map view. Depending on map orientation, this means
 * that the boundingBox property may return a different value than the one passed
 * to this method, because the map may be displaying some areas outside of the
 * input bounding box.
 *
 * \param boundingBox A %NMAGeoBoundingBox to display after the transformation
 * \param animationType A %NMAMapAnimation to illustrate the transformation
 */
- (void)setBoundingBox:(NMAGeoBoundingBox *)boundingBox
         withAnimation:(NMAMapAnimation)animationType;

/*!
 * Transforms the map to fit an arbitrary geo bounding box with the bounds
 * of a specific screen region with optional animation.
 *
 * Passing the bounds of the map view to this method is equivalent to calling
 * setBoundingBox:withAnimation:.
 *
 * \param boundingBox A %NMAGeoBoundingBox to display after the transformation
 * \param screenRect The region of the view inside which the bounding box will be
   located.
 * \param animationType The animation method used to perform the transformation.
 */
- (void)setBoundingBox:(NMAGeoBoundingBox *)boundingBox
            insideRect:(CGRect)screenRect
         withAnimation:(NMAMapAnimation)animationType;

#pragma mark Screen / World Conversion

/*!
 * Converts a specified on-screen point to an equivalent %NMAGeoCoordinates
 * object.
 *
 * \param point A point on the screen to convert
 * \return The %NMAGeoCoordinates, or nil if the conversaion failed
 */
- (NMAGeoCoordinates *)geoCoordinatesFromPoint:(CGPoint)point;

/*!
 * Converts a specified on-screen point to an equivalent %NMAGeoCoordinates
 * object on a specific altitude.
 *
 * \param point A point on the screen to convert
 * \param altitude A height in meters on which geo coordinates need to be calculated.
 * \return The %NMAGeoCoordinates, or nil if the conversaion failed
 */
- (NMAGeoCoordinates *)geoCoordinatesFromPoint:(CGPoint)point
                                  withAltitude:(float)altitude;

/*!
 * \brief Converts a specified %NMAGeoCoordinates object to its equivalent
 * point in screen space.
 *
 * Valid geo coordinates will produce a valid point, even if the coordinates are
 * not on the screen or are above the visible horizon, as long as the coordinates
 * are not too far from the current map location. To check if coordinates are
 * within the bounds of the screen, use the CGRectContainsPoint method after making
 * the conversion.
 *
 * \param coordinates A %NMAGeoCoordinates object to convert
 * \return The on-screen %CGPoint, or CGPoint.x = CGPoint.y = -CGFLOAT_MAX
 *         if the %NMAGeoCoordinates object is nil
 */
- (CGPoint)pointFromGeoCoordinates:(NMAGeoCoordinates *)coordinates;

/*!
 * Calculates the point distance between two geo coordinates.
 *
 * \note The calculation will fail if the coordinates are too far apart or too
 * far from the current location of the map.
 *
 * \param startCoordinates Starting %NMAGeoCoordinates
 * \param endCoordinates Ending %NMAGeoCoordinates
 * \return The point distance between the %NMAGeoCoordinates, or -CGFLOAT_MAX if
 * either of the \p coordinates parameters is nil or the calculation cannot be performed.
 */
- (double)pointDistanceFromGeoCoordinates:(NMAGeoCoordinates *)startCoordinates
                         toGeoCoordinates:(NMAGeoCoordinates *)endCoordinates;

/*!
 * Get the screen-space to world-space conversion factor at a specified zoom level.
 *
 * \note The conversion factor is based on a straight-line distance between two points;
 * that is, it does not take into account the curvature of the Earth.
 *
 * \param zoomLevel The zoom level at which to retrieve the conversion factor.
 * \return The conversion factor in meters per point.
 */
- (float)metersPerPointAtZoomLevel:(float)zoomLevel;

#pragma mark Snapshots

/**
 * \brief Creates a UIImage snapshot of an NMAMapView with the specified size
 * and positioning.
 *
 * <p>
 * This class method is used to create a static image of a map. A snapshot will
 * have the same visual appearance as an NMAMapView with the same coordinates,
 * zoom, orientation, and frame size. </p>
 * <p>
 * When a snapshot is requested, a completion block is passed in as the final
 * parameter. When the snapshot is ready, the block is invoked. Only one snapshot
 * will be processed at a time, but any number may be queued up via successive
 * calls to this method. Snapshots will be processed in the order they are
 * received. </p>
 *
 * \note This method is asycnhronous.
 *
 * \note Snapshots in regions where map data is not yet available will take
 * longer to complete.
 */
+ (void)snapshotWithGeoCoordinates:(NMAGeoCoordinates *)coordinates
                         zoomLevel:(float)zoom
                       orientation:(float)orientation
                              size:(CGSize)size
                             block:(void (^)(UIImage *snapshot))resultBlock;

/*!
 * \brief Records a static UIImage of the NMAMapView's current appearance.
 * The map view will redraw itself before capturing the image.
 *
 * <p>
 * When a snapshot is requested, a handler block is passed as the only parameter.
 * when the snapshot is ready, the block is invoked, taking the UIImage snapshot
 * as its sole input. </p>
 * <p>
 * Only one snapshot may be requested at a time. If multiple requests are made
 * together, only one snapshot will be produced and only the block passed with
 * the last call to this method will be invoked. </p>
 * <p>
 * This method is asynchronous. The snapshot will only be generated after the
 * map has been re-rendered; thus, if the visual state of the map is changed
 * immediately after calling this method (and before the block has executed),
 * the generated snapshot will reflect the changes made to the map. </p>
 * <p>
 * The snapshot will exactly match the appearance of the actual map view itself.
 * Thus, if the map is moved to a location where data is not yet available and
 * a snapshot requested, the snapshot will reflect the lack of map data. To
 * ensure a useful snapshot in this case, the mapViewDidDraw: method of the
 * %NMAMapViewDelegate protocol can be used to trigger the snapshot after map
 * data has been downloaded and rendered. Be aware that triggering a snapshot
 * causes another redraw, so be sure to add protection to the snapshot call
 * to avoid continuously requesting snapshots.</p>
 *
 * \note Objects drawn as part of the map (NMAMapObject subclasses) will be
 * captured in the snapshot; UI objects (such as subviews) will not.
 */
- (void)snapshotWithBlock:(void (^)(UIImage *snapshot))resultBlock;

#pragma mark Map Objects

/*!
 * Adds a %NMAMapObject to the %NMAMapView.
 *
 * \note The object is added to %NMAMapLayerTypeForeground layer.
 *
 * \param object A %NMAMapObject to add
 * \return YES if the map object was added successfully, NO otherwise
 *
 * \note Returns NO if the object has already been added (duplicates are not allowed).
 */
- (BOOL)addMapObject:(NMAMapObject *)object;

/*!
 * Adds a %NMAMapObject to the %NMAMapView
 *
 * \note The object is added to the specified %NMAMapLayerType
 *
 * \param object A %NMAMapObject to add
 *
 * \param layer A %NMAMapLayerType layer to add the object to
 *
 * \return YES if the map object was added successfully, NO otherwise (if the
 * object has already been added, as duplicates are not allowed).
 */
- (BOOL)addMapObject:(NMAMapObject *)object toLayer:(NMAMapLayerType)layer;

/*!
 * Adds a %NSArray of %NMAMapObject objects to the %NMAMapView.
 *
 * \param objects A %NSArray of %NMAMapObject objects to add
 * \return YES if all map objects were added successfully, NO otherwise
 */
- (BOOL)addMapObjects:(NSArray *)objects;

/*!
 * Adds a %NSArray of %NMAMapObject objects to the %NMAMapView.
 *
 * \param objects A %NSArray of %NMAMapObject objects to add
 * \param layer A %NMAMapLayerType layer to add the object to
 * \return YES if all map objects were added successfully, NO otherwise
 */
- (BOOL)addMapObjects:(NSArray *)objects toLayer:(NMAMapLayerType)layer;

/*!
 * Removes an existing %NMAMapObject from the %NMAMapView.
 *
 * \param object A %NMAMapObject to remove
 * \return YES if the map object was removed successfully, NO otherwise
 */
- (BOOL)removeMapObject:(NMAMapObject *)object;

/*!
 * Removes a %NSArray of %NMAMapObject objects from the %NMAMapView.
 *
 * \param objects A %NSArray of %NMAMapObject objects to remove
 * \return YES if all map objects were removed successfully, NO otherwise
 */
- (BOOL)removeMapObjects:(NSArray *)objects;

/*!
 * Returns a %NSArray of all %NMAMapObject objects that are selected at
 * a specified point on the screen.
 *
 * \param point An on-screen %CGPoint specified in logical coordinates
 * \return The %NSArray of selected %NMAMapObject objects
 *
 * \note Use isKindOfClass: to further determine NMAMapObject type instead of
 * isMemberOfClass:.
 */
- (NSArray *)objectsAtPoint:(CGPoint)point;

/*!
 * Returns a %NSArray of all visible %NMAMapObject objects that are
 * selected at a specified point on the screen.
 *
 * \param point An on-screen %CGPoint specified in logical coordinates
 * \return The %NSArray of selected %NMAMapObject objects
 */
- (NSArray *)visibleObjectsAtPoint:(CGPoint)point;

/*!
 * Attaches cluster layer to the map. From this moment on the markers added to the layer will be
 * also added to the map. After the layer is added clustering will happen automatically.
 *
 * \param clusterLayer Layer to add.
 * \return YES if successfully added.
 */
- (BOOL)addClusterLayer:(NMAClusterLayer *)clusterLayer;

/*!
 * Detaches the cluster from the map. After this call completes markers on this layer will be
 * removed from the map.
 *
 * \param clusterLayer Layer to remove.
 * \return YES if successfully removed.
 */
- (BOOL)removeClusterLayer:(NMAClusterLayer *)clusterLayer;

#pragma mark Map Overlays

/*!
 * Adds a %NMAMapOverlay object to the %NMAMapView.
 *
 * \param overlay A %NMAMapOverlay object to add
 * \return YES if the map overlay was added successfully, NO otherwise
 */
- (BOOL)addMapOverlay:(NMAMapOverlay *)overlay;

/*!
 * Removes an existing %NMAMapOverlay object from the %NMAMapView.
 *
 * \param overlay A %NMAMapOverlay object to remove
 * \return YES if the map overlay was removed successfully, NO otherwise
 */
- (BOOL)removeMapOverlay:(NMAMapOverlay *)overlay;

#pragma mark Copyright

/**
 * The copyright for the %NMAMapView.
 */
@property (nonatomic, readonly) NSString *copyright;

/**
 * The copyright logo position for the %NMAMapView.
 *
 * \note Valid values are NMALayoutPositionTopLeft, NMALayoutPositionTopCenter,
 * NMALayoutPositionTopRight, NMALayoutPositionBottomLeft, NMALayoutPositionBottomCenter,
 * and NMALayoutPositionBottomRight.
 */
@property (nonatomic) NMALayoutPosition copyrightLogoPosition;

/**
 * The distance in points that the copyright logo will be from the top or
 *  bottom edge of the NMAMapView.
 *
 * \note Values less than 10.0 will be ignored.
 */
@property (nonatomic) float copyrightLogoVerticalMargin;

/**
 * The distance in points that the copyright logo will be from the left or
 *  right edge of the NMAMapView.
 *
 * \note Values less than 10.0 will be ignored.
 *
 * \note Does not apply when the copyrightLogoPosition is NMALayoutPositionTopCenter
 * or NMALayoutPositionBottomCenter.
 */
@property (nonatomic) float copyrightLogoHorizontalMargin;


#pragma mark - Street Level Imagery

/**
 * \brief Controls if Street Level Imagery coverage is rendered on the %NMAMapView.
 *
 * If YES, the areas of the map for which street level imagery is available will be
 * highlighted in a light blue color. This is a visual representation of the information
 * available programmatically via NMAStreetLevelCoverage.
 *
 * You can obtain a 3D street level view for areas where street level imagery is supported
 * by creating an NMAStreetLevelView and instructing it to move to an Geo Position
 * representing the supported area.
 *
 * The Street Level Imagery coverage is not visiable if access to this operation
 * is denied. Contact your HERE representative for more information.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
@property (nonatomic, getter = isStreetLevelCoverageVisible) BOOL streetLevelCoverageVisible;


#pragma mark - Transit

/**
 * The transit stop display mode for the %NMAMapView.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
@property (nonatomic) NMAMapTransitDisplayMode transitDisplayMode;

/**
 * The map transit layer for the %NMAMapView.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
@property (nonatomic, readonly) NMAMapTransitLayer *mapTransitLayer;


#pragma mark - Traffic

/**
 * \brief Indicates traffic visibility for the %NMAMapView.
 *
 * <p>
 * This provides global control over traffic visibility on the map. To change
 * the visibility of an individual %NMATrafficLayer please see showTrafficLayers,
 * hideTrafficLayers
 * </p>
 *
 * <p>
 * Traffic can only be displayed on one map at a time. It is recommended that you turn off
 * traffic display on other maps before enabling traffic display on a new map otherwise the
 * results may be unpredictable. If multiple maps are shown at the same time with
 * trafficVisible YES, only one will display traffic.
 * </p>
 *
 * The traffic is not visible if access to this operation is denied. Contact
 * your HERE representative for more information.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
@property (nonatomic, getter = isTrafficVisible) BOOL trafficVisible;

/**
 * \brief Displays one or more traffic layers.
 *
 * The layers to be displayed are specified using the NMATrafficLayer enum.
 * Traffic layers which are already visible will not be affected.
 *
 * \note No traffic layers will be shown unless trafficVisible is YES. However,
 * changes to individual NMATrafficLayer visibility settings will be saved even if
 * trafficVisible is currently NO. They will be applied when trafficVisible is YES.
 *
 * \param layers An "OR" combination of layers to be displayed.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
- (void)showTrafficLayers:(NSInteger)layers;

/**
 * \brief Hides one or more traffic layers.
 *
 * The layers to be hidden are specified using the NMATrafficLayer enum.
 * Traffic layers which are already hidden will not be affected.
 *
 * \note No traffic layers will be shown unless trafficVisible is YES. However,
 * changes to individual NMATrafficLayer visibility settings will be saved even if
 * trafficVisible is currently NO. They will be applied when trafficVisible is YES.
 *
 * \param layers An "OR" combination of layers to be hidden.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
- (void)hideTrafficLayers:(NSInteger)layers;

/**
 * Queries whether a given traffic layer is displayed.
 *
 * \note By default all traffic layers are visible.
 *
 * \note No traffic layers will be shown unless trafficVisible is YES. However,
 * the state of individual NMATrafficLayer visibility settings will still be saved
 * when trafficVisible is NO. Therefore, this function may return YES even when
 * trafficVisible is NO. The visibility settings will be applied when trafficVisible
 * is YES.
 *
 * \param layer The traffic layer type to check.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
- (BOOL)isTrafficLayerVisible:(NMATrafficLayer)layer;


#pragma mark - Road Information

/**
 * Get the road elements for a geo bounding area.
 *
 * \param geoArea A %NMAGeoBoundingBox to get the road elements
 * \return NSArray of NMARoadElement of the geo area.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
- (NSArray *)roadElementsInArea:(NMAGeoBoundingBox *)geoArea;


#pragma mark - Custom Raster Tiles

/**
 * Adds a NMAMapTileLayer to the map view for rendering custom raster tiles.
 *
 * \param tileLayer NMAMapTileLayer instance to be added to the map view. Ignores
 *                  attempts to add the same NMAMapTileLayer instance twice.
 *
 * \note Attempting to add a single NMAMapTileLayer instance to multiple NMAMapView
 * instances is not supported and will result in undefined behavior.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
- (void)addMapTileLayer:(NMAMapTileLayer *)tileLayer;

/**
 * Removes a NMAMapTileLayer from the map view.
 *
 * \param tileLayer NMAMapTileLayer instance to be removed from the map view. Does nothing
 *                  if tileLayer has not been added to the map view yet.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
- (void)removeMapTileLayer:(NMAMapTileLayer *)tileLayer;

/**
 * Returns an array of NMAMapTileLayer instances that have been added to the
 * map view.
 *
 * \return NSArray of NMAMapTileLayer instances.
 *
 * @product nlp-hybrid-plus nlp-plus
 */
- (NSArray *)mapTileLayers;


#pragma mark - DEPRECATED

/*!
 * Map layer enum mask
 *
 * \deprecated Please use NMAMapLayerCategory instead.
 */
DEPRECATED_ATTRIBUTE
typedef NS_OPTIONS(NSInteger, NMABaseMapLayer) {
    /**
     * \brief Park names, city centers, lake names,
     * country/state names, names for other area and line features.
     */
    NMABaseMapLayerLabels = 1,

    /** \brief Street names, ferry names, highway signs, exit icons. */
    NMABaseMapLayerStreetLabels = 1 << 1,

    /** \brief Traffic flow lines. */
    NMABaseMapLayerTraffic = 1 << 2,

    /** \brief Line features like street networks, country/state borders */
    NMABaseMapLayerLines = 1 << 3,

    /** \brief Street Level coverage. Note that coverage is only drawn when coverage is enabled */
    NMABaseMapLayerStreetLevelCoverage = 1 << 4,

    /** \brief Area features like park, water polygons */
    NMABaseMapLayerAreas = 1 << 5,

    /** \brief Background colors, satellite or terrain images */
    NMABaseMapLayerBackground = 1 << 6,

    /** \brief Special features like truck attributes or environmental zones. */
    NMABaseMapLayerSpecialFeatures = 1 << 7,

    /** \brief Terrain */
    NMABaseMapLayerTerrain = 1 << 9,

    /** \brief This value represents all options. It can be used as a mask. */
    NMABaseMapLayerAll = 0xFFFF
};

/*!
 * Set the visibility of a specific sets of map rendering layers.
 *
 * \deprecated Please use setVisibility:forMapLayerCategories: instead.
 *
 * The layers are specified using the NMABaseMapLayer enum. Use NMABaseMapLayerAll
 * to select all map layers.
 *
 * \param visible YES to make map layers visible, NO to hide map layers.
 * \param layers A specific sets of map layers.
 * \return YES if enable or disable map layers successfully, NO otherwise.
 *
 * \note Only the specified map layers visibility are changed, the visibility of all
 * other map layers will remain the same.
 */
- (BOOL)setVisibility:(BOOL)visible forMapLayers:(NSInteger)layers DEPRECATED_ATTRIBUTE;

/**
 * Get the visibility of all map layers.
 *
 * \deprecated Please use visibleMapLayerCategories instead.
 *
 * @return The bitmap of map Layers visible.
 */
- (NSInteger)visibleMapLayers DEPRECATED_ATTRIBUTE;

/*!
 * Check the visibility of a specific map layer.
 *
 * \deprecated Please use isMapLayerCategoryVisible: instead.
 *
 * \param layer A specific map layer.
 * \return YES if the map layer is visible, NO otherwise.
 */
- (BOOL)isMapLayerVisible:(NMABaseMapLayer)layer DEPRECATED_ATTRIBUTE;

@end
/** @}  */
